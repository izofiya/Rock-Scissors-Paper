{"version":3,"sources":["Spinner.js","index.js"],"names":["Spinner","react_default","a","createElement","className","Game","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isActiveValueButton","elements","random","arrForWin","isLoading","winner","arrWinners","clickButton","bind","assertThisInitialized","getWinner","inherits","createClass","key","value","setState","evt","_this2","rand","Math","floor","length","target","setTimeout","concat","toConsumableArray","type","onClick","Spinner_Spinner","map","elem","ind","React","Component","rootElement","document","getElementById","ReactDOM","render","src_Game"],"mappings":"8OAEaA,EAAU,kBAAMC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDCGrC,IAAMC,EAAb,SAAAC,GACE,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,oBAAqB,GACrBC,SAAU,CAAC,OAAQ,QAAS,YAC5BC,OAAQ,GACRC,UAAW,GACXC,WAAW,EACXC,OAAQ,GACRC,WAAY,IAEdd,EAAKe,YAAcf,EAAKe,YAAYC,KAAjBf,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,KACnBA,EAAKkB,UAAYlB,EAAKkB,UAAUF,KAAff,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,KAZAA,EADrB,OAAAC,OAAAkB,EAAA,EAAAlB,CAAAJ,EAAAC,GAAAG,OAAAmB,EAAA,EAAAnB,CAAAJ,EAAA,EAAAwB,IAAA,YAAAC,MAAA,WAiBkC,SAA5BnB,KAAKI,MAAMI,UAAU,IACO,UAA5BR,KAAKI,MAAMI,UAAU,GAErBR,KAAKoB,SAAS,CACZV,OAAQ,SAGkB,UAA5BV,KAAKI,MAAMI,UAAU,IACO,SAA5BR,KAAKI,MAAMI,UAAU,GAErBR,KAAKoB,SAAS,CACZV,OAAQ,aAGkB,SAA5BV,KAAKI,MAAMI,UAAU,IACO,aAA5BR,KAAKI,MAAMI,UAAU,GAErBR,KAAKoB,SAAS,CACZV,OAAQ,aAGkB,aAA5BV,KAAKI,MAAMI,UAAU,IACO,SAA5BR,KAAKI,MAAMI,UAAU,GAErBR,KAAKoB,SAAS,CACZV,OAAQ,SAGkB,UAA5BV,KAAKI,MAAMI,UAAU,IACO,aAA5BR,KAAKI,MAAMI,UAAU,GAErBR,KAAKoB,SAAS,CACZV,OAAQ,SAGkB,aAA5BV,KAAKI,MAAMI,UAAU,IACO,UAA5BR,KAAKI,MAAMI,UAAU,GAErBR,KAAKoB,SAAS,CACZV,OAAQ,aAGVV,KAAKoB,SAAS,CACZV,OAAQ,WA5DhB,CAAAQ,IAAA,cAAAC,MAAA,SAgEcE,GAAK,IAAAC,EAAAtB,KACXuB,EAAOC,KAAKC,MAAMD,KAAKjB,SAAWP,KAAKI,MAAME,SAASoB,QAC1D1B,KAAKoB,SAAS,CACZf,oBAAqBgB,EAAIM,OAAOR,MAChCZ,OAAQP,KAAKI,MAAME,SAASiB,GAC5Bd,WAAW,EACXD,UAAW,KAEboB,WAAW,WACTN,EAAKF,SAAS,CACZX,WAAW,EACXD,UAAS,GAAAqB,OAAA/B,OAAAgC,EAAA,EAAAhC,CACJwB,EAAKlB,MAAMI,WADP,CAEPc,EAAKlB,MAAMG,OACXe,EAAKlB,MAAMC,sBAEbM,WAAU,GAAAkB,OAAA/B,OAAAgC,EAAA,EAAAhC,CAAMwB,EAAKlB,MAAMO,YAAjB,CAA6BW,EAAKlB,MAAMM,WAEpDY,EAAKP,aACJ,OAnFP,CAAAG,IAAA,SAAAC,MAAA,WAuFI,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,SAAOuC,KAAK,SAASZ,MAAM,OAAOa,QAAShC,KAAKY,eAElDtB,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,SAAOuC,KAAK,SAASZ,MAAM,QAAQa,QAAShC,KAAKY,eAEnDtB,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,SAAOuC,KAAK,SAASZ,MAAM,WAAWa,QAAShC,KAAKY,eAEtDtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,0BAAkBQ,KAAKI,MAAMK,UAAYnB,EAAAC,EAAAC,cAACyC,EAAD,MAAc,MACtDjC,KAAKI,MAAMI,UAEZlB,EAAAC,EAAAC,cAAA,2BAAmBQ,KAAKI,MAAMM,QAC9BpB,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,UACGQ,KAAKI,MAAMO,WAAWuB,IAAI,SAACC,EAAMC,GAAP,MAChB,KAATD,EAAc7C,EAAAC,EAAAC,cAAA,MAAI0B,IAAKkB,GAAMD,GAAa,cA3GxDzC,EAAA,CAA0B2C,IAAMC,WAoH1BC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAAUL","file":"static/js/main.3a4c2807.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Spinner = () => <div className=\"loader\" />;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Spinner } from \"./Spinner.js\";\nimport \"./css/styles.css\";\n\nexport class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isActiveValueButton: \"\",\n      elements: [\"Rock\", \"Paper\", \"Scissors\"],\n      random: \"\",\n      arrForWin: [],\n      isLoading: false,\n      winner: \"\",\n      arrWinners: []\n    };\n    this.clickButton = this.clickButton.bind(this);\n    this.getWinner = this.getWinner.bind(this);\n  }\n  getWinner() {\n    if (\n      this.state.arrForWin[0] === \"Rock\" &&\n      this.state.arrForWin[1] === \"Paper\"\n    ) {\n      this.setState({\n        winner: \"user\"\n      });\n    } else if (\n      this.state.arrForWin[0] === \"Paper\" &&\n      this.state.arrForWin[1] === \"Rock\"\n    ) {\n      this.setState({\n        winner: \"computer\"\n      });\n    } else if (\n      this.state.arrForWin[0] === \"Rock\" &&\n      this.state.arrForWin[1] === \"Scissors\"\n    ) {\n      this.setState({\n        winner: \"computer\"\n      });\n    } else if (\n      this.state.arrForWin[0] === \"Scissors\" &&\n      this.state.arrForWin[1] === \"Rock\"\n    ) {\n      this.setState({\n        winner: \"user\"\n      });\n    } else if (\n      this.state.arrForWin[0] === \"Paper\" &&\n      this.state.arrForWin[1] === \"Scissors\"\n    ) {\n      this.setState({\n        winner: \"user\"\n      });\n    } else if (\n      this.state.arrForWin[0] === \"Scissors\" &&\n      this.state.arrForWin[1] === \"Paper\"\n    ) {\n      this.setState({\n        winner: \"computer\"\n      });\n    } else {\n      this.setState({\n        winner: \"draw\"\n      });\n    }\n  }\n  clickButton(evt) {\n    let rand = Math.floor(Math.random() * this.state.elements.length);\n    this.setState({\n      isActiveValueButton: evt.target.value,\n      random: this.state.elements[rand],\n      isLoading: true,\n      arrForWin: []\n    });\n    setTimeout(() => {\n      this.setState({\n        isLoading: false,\n        arrForWin: [\n          ...this.state.arrForWin,\n          this.state.random,\n          this.state.isActiveValueButton\n        ],\n        arrWinners: [...this.state.arrWinners, this.state.winner]\n      });\n      this.getWinner();\n    }, 700);\n  }\n\n  render() {\n    return (\n      <div className=\"wrapp\">\n        <h2>Make a choice</h2>\n        <p>\n          <input type=\"button\" value=\"Rock\" onClick={this.clickButton} />\n        </p>\n        <p>\n          <input type=\"button\" value=\"Paper\" onClick={this.clickButton} />\n        </p>\n        <p>\n          <input type=\"button\" value=\"Scissors\" onClick={this.clickButton} />\n        </p>\n        <div className=\"resultDiv\">\n          <h2>Game result: {this.state.isLoading ? <Spinner /> : null}</h2>\n          {this.state.arrForWin}\n\n          <h2>Our winner is {this.state.winner}</h2>\n          <h3>Game history:</h3>\n          <ol>\n            {this.state.arrWinners.map((elem, ind) =>\n              elem !== \"\" ? <li key={ind}>{elem}</li> : null\n            )}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Game />, rootElement);\n"],"sourceRoot":""}